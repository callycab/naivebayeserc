% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/S3_naive_baise.R
\name{fit}
\alias{fit}
\title{Naive Bayes Classifier Constructor}
\usage{
fit(formula,data, m=1, discretise="rpart", selectvar=TRUE)
}
\arguments{
\item{formula}{Formula to specifies which variables in data use to fit the model.}

\item{data}{A dataframe with the data..}

\item{m}{Integer to use the Laplacian in the calcul of probabilities.}

\item{discretise}{String to choose the discretising method. Can be "rpart" (recommanded) or "MDLP".}

\item{selectvar}{Boolean to enable/disable variables selection (stepforward).}
}
\value{
A NBAYES object (S3) with attributs :

This object has the following attributs:

formula: The formula given by the user as parameter

data: Dataframe given by the user as parameter

m: Integer given by the user as parameter (or m=1)

disc.param: Name of the methode used for discretising during the fit. It is "rpart" by default, or it can be "mdlp" if user submit it as parameter. Discretisation cannot be disabled.

disc.values: Result of the discretisation of numeric values in the dataframe data. It is used in the function predict to apply the same discretisation as computed during the fit.

signif: Dataframe of significance of the link between each variable X and Y, it is used in Summary and Plot. It contains the statistics and the p-value for each variable X.

Y: Name of the variable to classify. It is extract from the formula and used during the predict.

X: List of kept values for the classification. It is the result of the formula, the discretisation (some variables can be rejected) and the variables selection if enabled.

apriori: Table of prior probabilities for each modalities of Y.

p_conditionnel: List of table of conditional probabilities, for each modalities of every variables.
}
\description{
Build a Naive Bayes Classifier model from a dataframe. It discretise variables, compute conditionnal probabilities and select variables if choosen.
}
\examples{
data(iris)
df = iris
f = Species ~ .
df$Species = as.factor(df$Species)
bayes = fit(f, df, discretise = "rpart")
}
